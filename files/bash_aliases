if [ -f ~/.bash_keys ]; then
    . ~/.bash_keys
fi

export EDITOR='vim'
export TERM=screen-256color

alias ls='ls --color=tty'
alias l='ls -la'
alias less='less -S'
alias jqless='jq -C | less'
alias clip='xclip -sel clip'
alias dir-here='nautilus .'

alias my-update="sudo apt-get update -y && sudo apt-get upgrade -y && sudo apt-get autoremove -y && sudo apt-get autoremove --purge && sudo apt-get autoclean && sudo apt-get clean; brew update && brew upgrade && brew cleanup; sudo snap refresh"
alias reset-nul="sudo rm /dev/null && sudo mknod -m 0666 /dev/null c 1 3"
alias my-pm-sleep-1="sudo sh /etc/acpi/sleep.sh force"
alias my-pm-sleep-2="sudo pm-suspend"
alias my-pm-sleep-3="dbus-send --print-reply --system --dest=org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Suspend"
alias bt-on="pactl load-module module-bluetooth-device profile=a2dp sink_name=bluediot9 address=10:03:20:E2:24:E3"
alias mount-wildfire="sshfs -p 30022 flame@wildfire:/home/flame /mnt/sshfs-wildfire-home"
alias umount-wildfire="sudo fusermount -u /mnt/sshfs-wildfire-home"
alias umount-wildfire-force="sudo umount -fv /mnt/sshfs-wildfire-home"
alias mount_dingoo="sudo mount -t vfat /dev/sdb /mnt/dingoo"
alias umount_dingoo="sudo umount /dev/sdb"
alias test-bandwith="wget --output-document=/dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip"

alias tail-log="tail -f log/development.log"
alias mosh-kill="pgrep mosh-server | grep -v $(ps -o ppid --no-headers $$) | xargs -r kill"
alias gpg-cache="gpg --yes --sign --detach-sign --armor -u $(git config user.signingkey) ~/tmp/gpg.txt"
alias gpg-reset="gpgconf --kill gpg-agent"

dg() { grep -rl --exclude-dir tmp --exclude "*.log" "$@" *; }

function git-changes-rubocop () {
  TARGET=${1:-master..}
  FILES=`git diff-tree --no-commit-id --name-only -r $TARGET`
  echo "git diff: $TARGET"
  echo 'Files:'
  echo $FILES
  echo $FILES | xargs -r rubocop --force-exclusion
}

function git-changes-rspec () {
  TARGET=${1:-master..}
  MASK=${2:-"spec/.*_spec.rb"}
  FILES=`git diff-tree --no-commit-id --name-only -r $TARGET | grep $MASK`
  echo "git diff: $TARGET"
  if [ -z "$FILES" ]
  then
    echo "No spec files changed"
  else
    echo 'Files:'
    echo $FILES
    echo $FILES | xargs -r bundle exec rspec
  fi
}

function git-changes-rspec-touch () {
  TARGET=${1:-master..}
  MASK=${2:-"spec/.*_spec.rb"}
  FILES=`git diff-tree --no-commit-id --name-only -r $TARGET | grep $MASK`
  echo "git diff: $TARGET"
  if [ -z "$FILES" ]
  then
    echo "No spec files changed"
  else
    echo 'Files:'
    echo $FILES
    echo $FILES | xargs -r touch
  fi
}

function git-log-my () {
  for k in `git branch|perl -pe 's/^..//'`;do echo -e `git show --since="1 $1 ago" --author="$(git config user.name)" --pretty=format:"%Cgreen%ci %Cblue%cr%Creset" $k|head -n 1`\\t$k;done|sort -r|grep :
}

function dg () {
  grep -rl --exclude-dir tmp --exclude *.log "$@" *;
}

function dirfind () {
  find . -iname  "$@";
}

function wpid () {
  ps aux | grep "$@" | grep -v "grep" | grep "$USER\s*[[:digit:]]*"
}

function batch-js2coffee () {
  find "$@" -name "*.js" -print -exec sh -c "js2coffee '{}' > '{}.coffee' && rm '{}'" -- {} \;
}

function gdrive_download () {
  CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://docs.google.com/uc?export=download&id=$1" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
  wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$CONFIRM&id=$1" -O $2
  rm -rf /tmp/cookies.txt
}

function date_stamp () {
  date -u "+%F-%H%M%S"
}

function backups_save () {
  APP_NAME=$1
  TYPE_NAME=$2
  SOURCE=$3

  DATESTAMP=$(date_stamp)
  TMP_PATH="/home/deployer/tmp"
  BACKUP_ROOT_PATH="/mnt/vladalive-bucket-01/backups/apps"
  BACKUP_PATH="$BACKUP_ROOT_PATH/$APP_NAME"
  OUTPUT_FILE_NAME="$DATESTAMP-$APP_NAME-$TYPE_NAME.tar.gz"

  tar cv $SOURCE | gzip -9 > "$TMP_PATH/$OUTPUT_FILE_NAME"
  mkdir -p "$TMP_PATH"
  mkdir -p "$BACKUP_PATH"
  mv "$TMP_PATH/$OUTPUT_FILE_NAME" "$BACKUP_PATH"
  echo "Backup: $OUTPUT_FILE_NAME"
  echo "Saved to: $BACKUP_PATH"
}

function backups_save_db_docker_pg () {
  DB_FILE=./db.sql

  backups_db_docker_pg_dump $2
  backups_save $1 db $DB_FILE
  rm $DB_FILE
}

function backups_save_db_dokku_pg () {
  DB_FILE=./db.sql

  backups_db_dokku_pg_dump $2
  backups_save $1 db $DB_FILE
  rm $DB_FILE
}

function backups_db_docker_pg_dump () {
  CONTAINER_NAME=$1
  DB_FILE=./db.sql

  docker exec -t $CONTAINER_NAME pg_dumpall -c -U postgres > $DB_FILE
}

function backups_db_dokku_pg_dump () {
  CONTAINER_NAME=$1
  DB_FILE=./db.sql

  dokku postgres:export $CONTAINER_NAME > $DB_FILE
}

function rails-db-test-setup () {
  echo "bundle exec rails db:{environment:set,drop,create,schema:load,migrate}"
  RAILS_ENV=test \
    bundle exec rails \
      db:environment:set \
      db:drop \
      db:create \
      db:schema:load \
      db:migrate
}

function rails-db-migrate () {
  echo "bundle exec rails db:{environment:set,migrate}"
  RAILS_ENV=development \
    bundle exec rails \
      db:environment:set \
      db:migrate
}

function rails-db-test-parallel-setup () {
  echo "bundle exec rails db:environment:set parallel:{drop,create,load_schema,migrate}"
  RAILS_ENV=test \
    bundle exec rails \
      db:environment:set \
      db:drop \
      db:create \
      parallel:drop \
      parallel:create \
      parallel:load_schema \
      parallel:migrate
}

function rails-db-parallel-migrate () {
  echo "bundle exec rails db:environment:set parallel:migrate"
  RAILS_ENV=test \
    bundle exec rails \
      db:environment:set \
      parallel:migrate
}

function git-rubocop-autocorrect-offense () {
  OFFENSE=$@
  COMMAND="rubocop -a --only $OFFENSE"
  echo $COMMAND
  eval " $COMMAND"
  git add .
  git commit -m "[run] $COMMAND"
}

function worklog-total () {
  CMD=' '
  CMD+='$/ = "!"; '
  CMD+='total = STDIN.gets.split("\n").compact.map(&:to_s).map(&:strip).map { |i| i[/\[([\d\.]*)\]/, 1]&.to_f }.map { |i| puts "value: #{i}"; i }.compact.sum; '
  CMD+='puts "total: #{total}"; '
  ruby -e $CMD
}

function git-rebase-all () {
  BASE=${1:-master}
  git checkout $BASE
  for branch in `git branch --no-merged | grep -v $BASE`; do
    git checkout $branch
    git rebase $BASE
    if [ $? -ne 0 ]; then
      echo "Rebase failed in branch '$branch'"
      git rebase --abort
    fi
  done
  git checkout $BASE
}

function gh-run-watch-current () {
  ID=$(gh run list --limit 1 --json databaseId --jq '.[0].databaseId')
  gh run watch $ID
}

function gh-pr-create-statusgator () {
  URL=$1
  ISSUE_NUMBER=$(echo $URL | grep -o '[0-9]\+' | tail -1)
  SHORT_URL=$(echo $URL | sed -n 's/^\(https\:\/\/trello\.com\/c\/\S*\)\/.*$/\1/p')
  CMD="/usr/bin/gh pr create --base master --reviewer cbartlett,alibby --fill --body \"* [#$ISSUE_NUMBER]($SHORT_URL)\""
  echo $CMD
  $($CMD)
}

function grep-gh-run-errors-ruby () {
  grep -oP "# ./(spec/.*spec.rb:[[:digit:]]+)$"
}

function gh-failed () {
  JOB_ID=$1
  gh run view --log-failed --job=$JOB_ID | grep-gh-run-errors-ruby
}

unalias '='
