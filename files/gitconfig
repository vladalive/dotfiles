[user]
  name = Vlad Alive
  email = vladalive@gmail.com
  signingkey = 800B483BD2EB8461

[color]
  diff = auto
  status = auto
  branch = auto
  ui = true

[rerere]
  enabled = 1

[alias]  # shortcuts
  s      = status
  c      = checkout
  b      = branch

  env-branch-master     = config --get --default master branches.master
  env-branch-develop    = config --get --default develop branches.develop
  env-branch-staging    = config --get --default staging branches.staging
  env-branch-production = config --get --default production branches.production

  cm = "!git checkout $(git env-branch-master)"
  cd = "!git checkout $(git env-branch-develop)"

  d      = diff
  dw     = diff -b -w
  dc     = diff -b --cached
  ds     = diff -b --stat
  dst    = diff --staged
  dn     = diff --name-only

  # dm     = diff master...
  dm = "!git diff $(git env-branch-master)..."

  # dd     = diff develop...
  dd = "!git diff $(git env-branch-develop)..."

  co     = commit
  com    = commit -m
  cof    = commit -m 'f'

  # rebm   = rebase master
  rebm = "!git rebase $(git env-branch-master)"

  # rebd   = rebase develop
  rebd = "!git rebase $(git env-branch-develop)"

  rebp   = rebase production

  # rebim  = rebase -i master
  rebim = "!git rebase -i $(git env-branch-master)"

  # rebid  = rebase -i develop
  rebid = "!git rebase -i $(git env-branch-develop)"

  # rebip  = rebase -i production
  rebip = "!git rebase -i $(git env-branch-production)"

  rebi   = rebase -i
  rebi1  = rebase -i HEAD~1
  rebi2  = rebase -i HEAD~2
  rebi3  = rebase -i HEAD~3
  rebi4  = rebase -i HEAD~4
  rebi5  = rebase -i HEAD~5

  # summary of what you're going to push
  ps     = log --oneline origin...

  # like "git log", but include the diffs
  w      = whatchanged -p

  # changes since we last did a push
  wo     = whatchanged -p origin...

  lo     = log --oneline

  # lom    = log --oneline master..
  lom = "!git log --oneline $(git env-branch-master).."

  # lod    = log --oneline develop..
  lod = "!git log --oneline $(git env-branch-develop).."

  # lop    = log --oneline production..
  lop = "!git log --oneline $(git env-branch-production).."

  lm     = log --pretty=format:'%an | %s'
  lmd    = log --author="$(git config user.name)" --since='1 day'
  lmw    = log --author="$(git config user.name)" --since='1 week'
  lmm    = log --author="$(git config user.name)" --since='1 month'
  lg     = log --graph --all --abbrev-commit --decorate --date=relative \
    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  last   = log -1 HEAD --stat

  logsum = shortlog --numbered --summary --email

  g      = grep --break --heading --line-number
  gn     = grep --name-only
  grepa  = grep -A 5
  grepb  = grep -B 5
  grepc  = grep -C 5

  create-pull-request = !sh -c 'stash pull-request $0 $@'
  up = pull --rebase --autostash

  log-my-branches = "!f() { \
    PERIOD=${1:-week} ;\
    SINCE=\"1 $PERIOD ago\" ;\
    AUTHOR=$(git config user.name) ;\
    BRANCHES=$(git branch|perl -pe 's/^..//') ;\
    echo \"my branches since $SINCE:\" ;\
    for k in $BRANCHES; do \
      COMMIT=$(git show --since=\"$SINCE\" --author=\"$AUTHOR\" --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset\" $k|head -n 1) ;\
      RESULT="$COMMIT\\\t$k" ;\
      echo $RESULT ;\
    done|sort -r| grep : ;\
  }; f"

  logrep = "!f() { \
    git log --oneline | grep \"$1\" | less ;\
  }; f"
  grep-replace = "!f() { \
    git grep -l \"$1\" | xargs -r sed -i "s/$1/$2/g" ;\
  }; f"

  grep-ruby = "!f() { \
    git grep \"$1\" -- '*.rb' ;\
  }; f"
  grep-html = "!f() { \
    git grep \"$1\" -- '*.html' '*.haml' '*.jade' '*.pug' '*.vue' ;\
  }; f"
  grep-css = "!f() { \
    git grep \"$1\" -- '*.css' '*.scss' '*.sass' '*.styl' '*.less' ;\
  }; f"
  grep-js = "!f() { \
    git grep \"$1\" -- '*.js' '*.coffee' '*.ts' ;\
  }; f"
  cg = "!f() { \
    TARGET=${1:-master} ;\
    BRANCH=$(git branch | grep $TARGET | grep -v '*' | awk 'NR==1{print $TARGET}') ;\
    [ -n "$BRANCH" ] && git checkout $BRANCH || true ;\
  }; f"
  rcom = "!f() { \
    eval \"$1\";\
    git add .;\
    git commit -m \"[run] $1\";\
  }; f"

[core]
  excludesfile = ~/.gitignore
  autocrlf = input
  # pager = diff-so-fancy | less --tabs=4 -cR
  # pager = delta
  pager = delta --diff-so-fancy | less --tabs=4 -cRS
  # pager = delta | less --tabs=4 -cRS
  fsmonitor = false
  untrackedcache = true

[github]
  user = vladalive

[credential]
  helper = cache

[gist]
  private = yes

[grep]
  lineNumber = true
  patternType = extended
	extendedRegexp = true

[diff]
  tool = vimdiff
  compactionHeuristic = true
  colorMoved = default

[merge]
  tool = vimdiff
  conflictstyle = diff3

[mergetool]
  prompt = false
  keepBackup = false

[difftool]
  prompt = false

[push]
  default = current

[rebase]
  autosquash = true
  autoStash = true

[git-up "bundler"]
  check = true

# [remote "origin"]
#   fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
[mergetool "diffconflicts"]
	cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
	trustExitCode = true
[pull]
  rebase = true
[gitflow "branch"]
	master = develop
	develop = master
[gitflow "prefix"]
	feature = feature/
	bugfix = bugfix/
	release = release/
	hotfix = hotfix/
	support = support/
	versiontag = 
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = 11
	frag = magenta bold
	func = 146 bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[diff-so-fancy]
  useUnicodeRuler = true
[interactive]
  # diffFilter = diff-so-fancy --patch
  diffFilter = delta --color-only
  # diffFilter = delta --diff-so-fancy
[delta "decorations"]
  # side-by-side = true
  # line-numbers = true
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
  hunk-header-style = file line-number syntax
[delta]
  navigate = true
  light = false
  # features = decorations
  # features = unobtrusive-line-numbers decorations
[commit]
  gpgsign = true
